name: Deploy to Hostinger

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  DEPLOYMENT_TIMEOUT: 300

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '${{ env.NODE_VERSION }}'
        cache: 'npm'

    - name: Validate secrets
      run: |
        echo "Validating required secrets..."
        required_secrets=(
          "HOSTINGER_HOST"
          "HOSTINGER_USER" 
          "HOSTINGER_SSH_KEY"
          "DB_PASSWORD"
          "JWT_SECRET"
          "NEXT_PUBLIC_APP_URL"
        )

        missing_secrets=()
        for secret in "${required_secrets[@]}"; do
          if [ -z "${!secret}" ]; then
            missing_secrets+=("$secret")
          fi
        done

        if [ ${#missing_secrets[@]} -ne 0 ]; then
          echo "‚ùå Missing required secrets: ${missing_secrets[*]}"
          exit 1
        fi

        echo "‚úÖ All required secrets are present"
      env:
        HOSTINGER_HOST: '${{ secrets.HOSTINGER_HOST }}'
        HOSTINGER_USER: '${{ secrets.HOSTINGER_USER }}'
        HOSTINGER_SSH_KEY: '${{ secrets.HOSTINGER_SSH_KEY }}'
        DB_PASSWORD: '${{ secrets.DB_PASSWORD }}'
        JWT_SECRET: '${{ secrets.JWT_SECRET }}'
        NEXT_PUBLIC_APP_URL: '${{ secrets.NEXT_PUBLIC_APP_URL }}'

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.HOSTINGER_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

        # Add host key verification with retry
        for i in {1..3}; do
          if ssh-keyscan -H -p 65002 ${{ secrets.HOSTINGER_HOST }} >> ~/.ssh/known_hosts 2>/dev/null; then
            echo "‚úÖ Host key added successfully"
            break
          else
            echo "‚ö†Ô∏è Attempt $i failed, retrying..."
            sleep 5
          fi
        done

    - name: Test SSH connection
      run: |
        ssh -o ConnectTimeout=30 -o ServerAliveInterval=10 -p 65002 ${{ secrets.HOSTINGER_USER }}@${{ secrets.HOSTINGER_HOST }} "echo 'SSH connection successful'"

    - name: Install dependencies and build
      run: |
        echo "üì¶ Installing dependencies..."
        npm ci --prefer-offline --no-audit

        echo "üèóÔ∏è Building application..."
        npm run build

        echo "üîç Running linting..."
        npm run lint || echo "‚ö†Ô∏è Linting completed with warnings"

        echo "üîß Type checking..."
        npm run type-check || echo "‚ö†Ô∏è Type checking completed with warnings"

    - name: Create deployment archive
      run: |
        echo "üì¶ Creating deployment archive..."

        # Create a list of files to include, excluding problematic ones
        find . -type f \
          -not -path "./node_modules/*" \
          -not -path "./.git/*" \
          -not -path "./.next/cache/*" \
          -not -name "*.log" \
          -not -name ".env*" \
          -not -path "./coverage/*" \
          -not -name "*.test.*" \
          -not -path "./__tests__/*" \
          -not -path "./.github/*" \
          -not -name "README.md" \
          -not -name "*.md" \
          -not -name "nextdash-deployment.tar.gz" \
          > /tmp/files_to_archive.txt

        # Create archive from file list
        tar -czf nextdash-deployment.tar.gz -T /tmp/files_to_archive.txt

        # Verify archive was created
        if [ ! -f "nextdash-deployment.tar.gz" ]; then
          echo "‚ùå Failed to create deployment archive"
          exit 1
        fi

        echo "‚úÖ Deployment archive created ($(du -h nextdash-deployment.tar.gz | cut -f1))"

    - name: Upload to server
      run: |
        echo "‚¨ÜÔ∏è Uploading deployment archive..."

        # Upload with retry mechanism
        for i in {1..3}; do
          if scp -o ConnectTimeout=30 -P 65002 nextdash-deployment.tar.gz ${{ secrets.HOSTINGER_USER }}@${{ secrets.HOSTINGER_HOST }}:/tmp/; then
            echo "‚úÖ Upload successful"
            break
          else
            echo "‚ö†Ô∏è Upload attempt $i failed, retrying..."
            sleep 10
          fi
        done

    - name: Deploy application
      run: |
        ssh -o ConnectTimeout=30 -o ServerAliveInterval=10 -p 65002 ${{ secrets.HOSTINGER_USER }}@${{ secrets.HOSTINGER_HOST }} << 'EOF'
          set -e
          
          echo "üöÄ Starting deployment..."
          
          # Define paths (user directories, no sudo needed)
          APP_DIR="$HOME/nextdash-b"
          BACKUP_DIR="$HOME/backups"
          TEMP_DIR="/tmp/nextdash-deploy-$$"
          
          # Create directories
          mkdir -p "$APP_DIR" "$BACKUP_DIR" "$TEMP_DIR"
          
          # Backup current deployment
          if [ -d "$APP_DIR" ] && [ "$(ls -A $APP_DIR 2>/dev/null)" ]; then
            echo "üíæ Creating backup..."
            backup_file="$BACKUP_DIR/backup-$(date +%Y%m%d-%H%M%S).tar.gz"
            tar -czf "$backup_file" -C "$APP_DIR" . 2>/dev/null || echo "‚ö†Ô∏è Backup creation failed"
            
            # Keep only last 5 backups
            find "$BACKUP_DIR" -name "backup-*.tar.gz" -type f | sort | head -n -5 | xargs rm -f || true
          fi
          
          # Extract new deployment
          echo "üì¶ Extracting new deployment..."
          cd "$TEMP_DIR"
          if ! tar -xzf /tmp/nextdash-deployment.tar.gz; then
            echo "‚ùå Failed to extract deployment archive"
            exit 1
          fi
          
          # Move to production directory
          echo "üîÑ Deploying to production directory..."
          rm -rf "$APP_DIR"/*
          cp -r . "$APP_DIR"/ 2>/dev/null || true
          
          # Navigate to app directory
          cd "$APP_DIR"
          
          # Create production environment file
          echo "üîß Creating production environment..."
          cat > .env << 'EOL'
        # Production Environment - Auto-generated by GitHub Actions
        NEXT_PUBLIC_APP_NAME=NextDash-B
        NEXT_PUBLIC_APP_URL=${{ secrets.NEXT_PUBLIC_APP_URL }}
        NODE_ENV=production

        # Database Configuration
        DB_HOST=${{ secrets.DB_HOST }}
        DB_PORT=3306
        DB_NAME=${{ secrets.DB_NAME }}
        DB_USER=${{ secrets.DB_USER }}
        DB_PASSWORD=${{ secrets.DB_PASSWORD }}
        DB_SSL=false

        # Authentication
        JWT_SECRET=${{ secrets.JWT_SECRET }}
        JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}
        JWT_EXPIRES_IN=1h
        JWT_REFRESH_EXPIRES_IN=7d

        # Email Configuration
        SMTP_HOST=mail.smtp2go.com
        SMTP_PORT=2525
        SMTP_USER=${{ secrets.SMTP_USER }}
        SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}
        FROM_EMAIL=${{ secrets.FROM_EMAIL }}

        # File Upload
        MAX_FILE_SIZE=5MB
        UPLOAD_DIR=./uploads

        # Security
        BCRYPT_ROUNDS=12
        RATE_LIMIT_WINDOW=15
        RATE_LIMIT_MAX=100

        # Development
        DEBUG=false
        LOG_LEVEL=info

        # Admin Users
        ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}
        ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}
        ADMIN_FIRST_NAME=Admin
        ADMIN_LAST_NAME=User
        ADMIN2_EMAIL=${{ secrets.ADMIN2_EMAIL }}
        ADMIN2_PASSWORD=${{ secrets.ADMIN2_PASSWORD }}
        ADMIN2_FIRST_NAME=Derek
        ADMIN2_LAST_NAME=Admin
        EOL

          # Set permissions
          chmod 600 .env

          # Install dependencies and build for shared hosting
          echo "üì¶ Installing dependencies..."
          npm install --production

          echo "üèóÔ∏è Building application..."
          npm run build

          # Set up database
          echo "üóÑÔ∏è Setting up database..."
          node scripts/setup-env-users.js || echo "‚ö†Ô∏è Database setup completed with warnings"

          echo "üéâ Deployment completed!"
          echo "üåê Application URL: ${{ secrets.NEXT_PUBLIC_APP_URL }}"
          echo "üìÅ Deployed to: $APP_DIR"
          echo ""
          echo "üìã Next steps for Hostinger shared hosting:"
          echo "1. Set up Node.js app in hPanel"
          echo "2. Point document root to: $APP_DIR/public"
          echo "3. Set startup file to: $APP_DIR/server.js or next start"

          # Cleanup
          rm -rf "$TEMP_DIR"
          rm -f /tmp/nextdash-deployment.tar.gz
        EOF
    - name: Verify deployment
      run: |
        echo "üîç Verifying deployment..."

        # Test SSH connection
        if ssh -o ConnectTimeout=10 -p 65002 ${{ secrets.HOSTINGER_USER }}@${{ secrets.HOSTINGER_HOST }} "echo 'Post-deployment SSH test successful'"; then
          echo "‚úÖ SSH connection verified"
        else
          echo "‚ùå SSH connection failed"
          exit 1
        fi

        # Test application URL if accessible
        if [ -n "${{ secrets.NEXT_PUBLIC_APP_URL }}" ]; then
          echo "üåê Testing application URL..."
          sleep 15
          
          # Try health check endpoint
          if curl -f -s --max-time 30 "${{ secrets.NEXT_PUBLIC_APP_URL }}/api/health" > /dev/null; then
            echo "‚úÖ Application is responding at ${{ secrets.NEXT_PUBLIC_APP_URL }}"
          else
            echo "‚ö†Ô∏è Application health endpoint not responding (may still be initializing)"
            
            # Try main page as fallback
            if curl -f -s --max-time 30 "${{ secrets.NEXT_PUBLIC_APP_URL }}" > /dev/null; then
              echo "‚úÖ Application main page is accessible"
            else
              echo "‚ö†Ô∏è Application not responding yet"
            fi
          fi
        fi

    - name: Cleanup
      if: always()
      run: |
        echo "üßπ Cleaning up..."
        rm -f ~/.ssh/id_rsa
        rm -f nextdash-deployment.tar.gz
        echo "‚úÖ Cleanup completed"

    - name: Deployment summary
      if: always()
      run: |
        echo "## üéâ Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "üöÄ **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "üìù **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "üë§ **Triggered by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "üåê **URL**: ${{ secrets.NEXT_PUBLIC_APP_URL }}" >> $GITHUB_STEP_SUMMARY
        echo "‚è∞ **Completed**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìã Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "1. ‚úÖ Verify application is working at your domain" >> $GITHUB_STEP_SUMMARY
        echo "2. üîê Test admin login functionality" >> $GITHUB_STEP_SUMMARY
        echo "3. üìä Monitor application logs if needed" >> $GITHUB_STEP_SUMMARY
        echo "4. üîç Check database connectivity and data integrity" >> $GITHUB_STEP_SUMMARY
