name: Deploy to Hostinger

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Validate secrets
      run: |
        echo "Validating required secrets..."
        if [ -z "${{ secrets.HOSTINGER_HOST }}" ]; then echo "❌ HOSTINGER_HOST not set"; exit 1; fi
        if [ -z "${{ secrets.HOSTINGER_USER }}" ]; then echo "❌ HOSTINGER_USER not set"; exit 1; fi
        if [ -z "${{ secrets.HOSTINGER_SSH_KEY }}" ]; then echo "❌ HOSTINGER_SSH_KEY not set"; exit 1; fi
        if [ -z "${{ secrets.DB_PASSWORD }}" ]; then echo "❌ DB_PASSWORD not set"; exit 1; fi
        if [ -z "${{ secrets.JWT_SECRET }}" ]; then echo "❌ JWT_SECRET not set"; exit 1; fi
        echo "✅ All required secrets are present"

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.HOSTINGER_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H -p 65002 ${{ secrets.HOSTINGER_HOST }} >> ~/.ssh/known_hosts

    - name: Test SSH connection
      run: |
        ssh -o ConnectTimeout=10 -p 65002 ${{ secrets.HOSTINGER_USER }}@${{ secrets.HOSTINGER_HOST }} "echo 'SSH connection successful'"

    - name: Install dependencies and build
      run: |
        npm ci
        npm run build
        npm run lint
        npm run type-check

    - name: Create deployment archive
      run: |
        # Create archive with all necessary files
        tar -czf nextdash-deployment.tar.gz \
          --exclude=node_modules \
          --exclude=.git \
          --exclude=.next/cache \
          --exclude=*.log \
          --exclude=.env.local \
          .

    - name: Upload to server
      run: |
        scp -P 65002 nextdash-deployment.tar.gz ${{ secrets.HOSTINGER_USER }}@${{ secrets.HOSTINGER_HOST }}:/tmp/

    - name: Deploy application
      run: |
        ssh -p 65002 ${{ secrets.HOSTINGER_USER }}@${{ secrets.HOSTINGER_HOST }} << 'EOF'
          set -e
          
          echo "🚀 Starting deployment..."
          
          # Define paths
          APP_DIR="/var/www/nextdash-b"
          BACKUP_DIR="/var/backups/nextdash-b"
          
          # Create directories if they don't exist
          sudo mkdir -p $APP_DIR $BACKUP_DIR
          
          # Stop existing application
          echo "⏹️ Stopping existing application..."
          if [ -f "$APP_DIR/docker-compose.hostinger.yml" ]; then
            cd $APP_DIR && sudo docker-compose -f docker-compose.hostinger.yml down || true
          fi
          
          # Backup current deployment
          if [ -d "$APP_DIR" ] && [ "$(ls -A $APP_DIR)" ]; then
            echo "💾 Creating backup..."
            sudo tar -czf "$BACKUP_DIR/backup-$(date +%Y%m%d-%H%M%S).tar.gz" -C $APP_DIR . || true
          fi
          
          # Extract new deployment
          echo "📦 Extracting new deployment..."
          cd /tmp
          tar -xzf nextdash-deployment.tar.gz
          sudo rm -rf $APP_DIR/*
          sudo mv * $APP_DIR/ 2>/dev/null || true
          sudo chown -R $USER:$USER $APP_DIR
          
          # Navigate to app directory
          cd $APP_DIR
          
          # Create production environment file
          echo "🔧 Creating production environment..."
          cat > .env << EOL
        # Production Environment - Auto-generated by GitHub Actions
        NEXT_PUBLIC_APP_NAME=NextDash-B
        NEXT_PUBLIC_APP_URL=${{ secrets.NEXT_PUBLIC_APP_URL }}
        NODE_ENV=production
        
        # Database Configuration
        DB_HOST=${{ secrets.DB_HOST }}
        DB_PORT=3306
        DB_NAME=${{ secrets.DB_NAME }}
        DB_USER=${{ secrets.DB_USER }}
        DB_PASSWORD=${{ secrets.DB_PASSWORD }}
        DB_SSL=false
        
        # Authentication
        JWT_SECRET=${{ secrets.JWT_SECRET }}
        JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}
        JWT_EXPIRES_IN=1h
        JWT_REFRESH_EXPIRES_IN=7d
        
        # Email Configuration
        SMTP_HOST=mail.smtp2go.com
        SMTP_PORT=2525
        SMTP_USER=${{ secrets.SMTP_USER }}
        SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}
        FROM_EMAIL=${{ secrets.FROM_EMAIL }}
        
        # File Upload
        MAX_FILE_SIZE=5MB
        UPLOAD_DIR=./uploads
        
        # Security
        BCRYPT_ROUNDS=12
        RATE_LIMIT_WINDOW=15
        RATE_LIMIT_MAX=100
        
        # Development
        DEBUG=false
        LOG_LEVEL=info
        
        # Admin Users
        ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}
        ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}
        ADMIN_FIRST_NAME=Admin
        ADMIN_LAST_NAME=User
        ADMIN2_EMAIL=${{ secrets.ADMIN2_EMAIL }}
        ADMIN2_PASSWORD=${{ secrets.ADMIN2_PASSWORD }}
        ADMIN2_FIRST_NAME=Derek
        ADMIN2_LAST_NAME=Admin
        EOL
          
          # Set permissions
          chmod 600 .env
          
          # Build and start application
          echo "🏗️ Building application..."
          sudo docker-compose -f docker-compose.hostinger.yml build --no-cache
          
          echo "🚀 Starting application..."
          sudo docker-compose -f docker-compose.hostinger.yml up -d
          
          # Wait for application to start
          echo "⏳ Waiting for application to start..."
          sleep 30
          
          # Run database setup
          echo "🗄️ Setting up database..."
          sudo docker-compose -f docker-compose.hostinger.yml exec -T nextdash-app node scripts/setup-env-users.js || echo "⚠️ Database setup completed with warnings"
          
          # Health check
          echo "🏥 Performing health check..."
          for i in {1..10}; do
            if curl -f http://localhost:3000/api/health > /dev/null 2>&1; then
              echo "✅ Application is healthy"
              break
            fi
            echo "⏳ Waiting for application... (attempt $i/10)"
            sleep 10
          done
          
          # Show status
          echo "📊 Deployment status:"
          sudo docker-compose -f docker-compose.hostinger.yml ps
          
          echo "🎉 Deployment completed successfully!"
          echo "🌐 Application URL: ${{ secrets.NEXT_PUBLIC_APP_URL }}"
          
          # Cleanup
          rm -f /tmp/nextdash-deployment.tar.gz
        EOF

    - name: Verify deployment
      run: |
        echo "🔍 Verifying deployment..."
        
        # Test SSH connection still works
        ssh -p 65002 ${{ secrets.HOSTINGER_USER }}@${{ secrets.HOSTINGER_HOST }} "echo 'Post-deployment SSH test successful'"
        
        # Check if application is responding (if public URL is accessible)
        if [ -n "${{ secrets.NEXT_PUBLIC_APP_URL }}" ]; then
          echo "Testing application URL..."
          # Give it some time to fully start
          sleep 15
          if curl -f -s --max-time 30 "${{ secrets.NEXT_PUBLIC_APP_URL }}/api/health" > /dev/null; then
            echo "✅ Application is responding at ${{ secrets.NEXT_PUBLIC_APP_URL }}"
          else
            echo "⚠️ Application URL not responding yet (may still be starting)"
          fi
        fi

    - name: Cleanup
      run: |
        rm -f ~/.ssh/id_rsa
        rm -f nextdash-deployment.tar.gz

    - name: Deployment summary
      run: |
        echo "## 🎉 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "✅ **Status**: Success" >> $GITHUB_STEP_SUMMARY
        echo "🚀 **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "📝 **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "🌐 **URL**: ${{ secrets.NEXT_PUBLIC_APP_URL }}" >> $GITHUB_STEP_SUMMARY
        echo "⏰ **Time**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "1. Verify application is working at your domain" >> $GITHUB_STEP_SUMMARY
        echo "2. Test admin login functionality" >> $GITHUB_STEP_SUMMARY
        echo "3. Monitor application logs if needed" >> $GITHUB_STEP_SUMMARY